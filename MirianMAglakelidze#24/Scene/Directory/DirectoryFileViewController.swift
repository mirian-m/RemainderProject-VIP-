//
//  DirectoryFileViewController.swift
//  MirianMAglakelidze#24
//
//  Created by Admin on 8/23/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DirectoryFileDisplayLogic: AnyObject {
    func displaySomething(viewModel: DirectoryFile.DirectoryInfo.ViewModel)
    func displayFiles(viewModel: DirectoryFile.Directory.ViewModel)
}

class DirectoryFileViewController: UITableViewController, DirectoryFileDisplayLogic {
    var interactor: DirectoryFileBusinessLogic?
    var router: (NSObjectProtocol & DirectoryFileRoutingLogic & DirectoryFileDataPassing)?
    private var fileNames: [String] = []
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = DirectoryFileInteractor()
        let presenter = DirectoryFilePresenter()
        let router = DirectoryFileRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        getFilesFromFileManeger()
    }
    
    // MARK: AddButton Action
    @IBAction func addDirectoryBtnAction(_ sender: Any) {
        showAlerWithTextField()
    }
    
    func getFilesFromFileManeger() {
        let request = DirectoryFile.Directory.Request()
        interactor?.getFile(request: request)
    }
    
    func displaySomething(viewModel: DirectoryFile.DirectoryInfo.ViewModel) {
        if let error = viewModel.error  {
            showAlert(with: "ERROR", message: error)
        } else {
            getFilesFromFileManeger()
        }
    }
    
    // MARK: Alerts
    
    func showAlert(with title: String, message: String) {
        let alert = UIAlertController(title: title, message: "\n\(message)", preferredStyle: .alert)
        let action = UIAlertAction(title: "cancel", style: .cancel, handler: nil)
        alert.addAction(action)
        present(alert, animated: true, completion: nil)
    }
    
    func showAlerWithTextField() {
        let alert = UIAlertController(title: "Enter File Name", message: nil, preferredStyle: .alert)
        alert.addTextField()
        
        let submitAction = UIAlertAction(title: "Submit", style: .default) { [unowned alert] _ in
            guard let fileName = alert.textFields![0].text else { return }
            let requset = DirectoryFile.DirectoryInfo.Request(directoryName: fileName)
            self.interactor?.addDirectory(request: requset)
        }
        alert.addAction(submitAction)
        present(alert, animated: true)
    }
    
    func displayFiles(viewModel: DirectoryFile.Directory.ViewModel) {
        guard let names = viewModel.fileNames else { return }
        fileNames = names
        tableView.reloadData()
    }
    
//    MARK: TableView Funcs
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        fileNames.count
    }
    
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        TableViewConstatns.heightForRow
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "DirectoryTableViewCell", for: indexPath) as? DirectoryTableViewCell else { return UITableViewCell() }
        cell.configure(fileName: fileNames[indexPath.row]) 
        return cell
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        interactor?.paaTapedDocumentsName(name: fileNames[indexPath.row])
        router?.routeToRemainder(segue: nil)
    }
}
