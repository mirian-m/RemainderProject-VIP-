//
//  DirectoryFileInteractor.swift
//  MirianMAglakelidze#24
//
//  Created by Admin on 8/23/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DirectoryFileBusinessLogic {
    func addDirectory(request: DirectoryFile.DirectoryInfo.Request)
    func getFile(request: DirectoryFile.Directory.Request)
    func paaTapedDocumentsName(name: String)
}

protocol DirectoryFileDataStore {
    var tappedFileName: String { get set }
}

class DirectoryFileInteractor: DirectoryFileBusinessLogic, DirectoryFileDataStore {
    
    
    var presenter: DirectoryFilePresentationLogic?
    var worker: DirectoryFileWorker?
    var tappedFileName: String = ""
    
    // MARK: Do 
    
    func addDirectory(request: DirectoryFile.DirectoryInfo.Request) {
        worker = DirectoryFileWorker()
        worker?.addDirectoryToFileManager(with: request.directoryName, complition: { [weak self] error in
            let response = DirectoryFile.DirectoryInfo.Response(error: error)
            self?.presenter?.presentErroToString(response: response)
        })
    }
    
    func getFile(request: DirectoryFile.Directory.Request) {
        worker = DirectoryFileWorker()
        worker?.getDocumentsName(complition: { files in
            let respons = DirectoryFile.Directory.Response(objects: files)
            self.presenter?.presentFileNames(response: respons)
        })
    }
    
    func paaTapedDocumentsName(name: String) {
        tappedFileName = name
    }

}
